HAProxy Overview & Feature Breakdown
1. Flexibility & Scalability
Flexible Configuration: Supports TCP, HTTP, HTTPS, and Layer 4/7 routing.

Scalable Architecture: Can handle tens of thousands of concurrent connections per instance.

Load Balancing Algorithms: Round Robin, Least Connections, Source Hash, and more.

Dynamic Scaling: Supports adding/removing backend servers without restarting HAProxy.

2. Health Monitoring
Active Health Checks: Periodically sends HTTP/TCP checks to backend servers.

Passive Health Checks: Automatically marks servers as unhealthy if they fail to respond.

Granular Control: Different health check URLs, intervals, and response code checks.

Server Weighting: Directs more traffic to stronger servers.

3. High Availability
Failover Support: If a backend goes down, traffic is automatically redirected.

Multiple HAProxy Instances: Can be paired with Keepalived for VRRP-based failover.

Zero-Downtime Reloads: Can apply configuration changes without interrupting connections.

4. Security Features
SSL/TLS Termination: Offloads SSL encryption from backend servers.

Rate Limiting: Prevents abuse by limiting requests per IP.

IP Whitelisting/Blacklisting: Filters traffic based on IP ranges.

HTTP Security Headers: Adds protection against XSS, clickjacking, and protocol downgrade attacks.

DDoS Mitigation: Connection limits and request tracking.

5. User Interface & Management Tools
Command-Line Interface (CLI): Config-driven, managed via haproxy.cfg.

HAProxy Stats Page: Built-in web dashboard showing live traffic, server health, and metrics.

Third-Party GUIs: Tools like HAProxy Enterprise GUI, Pound, or integration with Ansible/Chef/Puppet for automation.

6. Cost Efficiency
Free & Open Source: Licensed under GPL.

Low Resource Usage: Efficient C-based implementation with low CPU/memory footprint.

Horizontal Scaling: Can run on commodity hardware without expensive licenses.
...................................................................................................
configuration files :
..................
/etc/haproxy/
    haproxy.cfg         # Main configuration
    certs/              # SSL certificates
    errors/             # Custom error pages
/usr/sbin/haproxy       # Binary
/var/log/haproxy.log    # Logs
/run/haproxy.pid        # PID file
/run/haproxy/admin.sock # Admin socket
...............................
/etc/haproxy/haproxy.cfg   # Main config
/etc/haproxy/certs/        # SSL certificates
/etc/haproxy/errors/       # Error pages
/usr/sbin/haproxy          # Binary
/var/log/haproxy.log       # Logs
/run/haproxy.pid           # PID file
/run/haproxy/admin.sock    # Admin socket
Installation (Ubuntu/Debian)
bash
Copy
Edit
sudo apt update && sudo apt install haproxy -y
sudo systemctl enable haproxy
sudo systemctl start haproxy
..........................................................................................................................................................................................


Step-by-Step Breakdown
1. Global Section
haproxy
Copy
Edit
global
    log /dev/log local0
    log /dev/log local1 notice
    daemon
    maxconn 4096
    tune.ssl.default-dh-param 2048
log /dev/log local0 & local1 notice → Logs activity to syslog.

daemon → Runs HAProxy in the background.

maxconn 4096 → Max simultaneous connections HAProxy can handle.

tune.ssl.default-dh-param 2048 → Sets secure Diffie-Hellman parameters for SSL.

2. Defaults Section
haproxy
Copy
Edit
defaults
    log global
    option httplog
    option dontlognull
    timeout connect 5s
    timeout client  50s
    timeout server  50s
    option forwardfor
    option http-server-close
Applies default settings to all frontends/backends unless overridden.

option httplog → Logs HTTP requests in detail.

option dontlognull → Don’t log empty connections (avoids noise).

timeout connect 5s → Max time to connect to backend.

timeout client/server 50s → Max inactivity time for client/server.

option forwardfor → Passes the original client IP to the backend via the X-Forwarded-For header.

option http-server-close → Closes connection after each request (saves resources).

3. HTTPS Frontend
haproxy
Copy
Edit
frontend https_in
    bind *:443 ssl crt /etc/haproxy/certs/nginx-selfsigned.pem
    mode http
Listens on port 443 for HTTPS traffic.

Uses SSL certificate /etc/haproxy/certs/nginx-selfsigned.pem.

Operates in HTTP mode.

Security Headers
haproxy
Copy
Edit
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
Adds HTTP security headers to every response to prevent:

Clickjacking (X-Frame-Options)

MIME type sniffing (X-Content-Type-Options)

XSS attacks (X-XSS-Protection)

Forces HTTPS for a year (Strict-Transport-Security).

Rate Limiting
haproxy
Copy
Edit
    stick-table type ip size 100k expire 10s store http_req_rate(10s)
    tcp-request connection track-sc0 src
    tcp-request content reject if { sc_http_req_rate(0) gt 10 }
stick-table → Tracks requests per IP.

http_req_rate(10s) → Measures request rate over 10 seconds.

If > 10 requests/sec from an IP → HAProxy rejects the request (helps against DDoS/brute force).

Default Backend
h
Copy
Edit
    default_backend nodejs_cluster
If no specific routing rule is matched → Forward traffic to nodejs_cluster backend.

4. HTTP Frontend
haproxy
Copy
Edit
frontend http_in
    bind *:80
    redirect scheme https code 301 if !{ ssl_fc }
Listens on port 80 (HTTP).

Always redirects to HTTPS (301 redirect).

5. Backend (Load Balancing Node.js Apps)
haproxy
Copy
Edit
backend nodejs_cluster
    balance leastconn
    option httpchk GET /health
    server node1 127.0.0.1:3001 check maxconn 1024
    server node2 127.0.0.1:3002 check maxconn 1024
    server node3 127.0.0.1:3003 check maxconn 1024
balance leastconn → Send new requests to the server with the fewest connections.

option httpchk GET /health → Health check by sending GET /health to each server.

server nodeX → Defines your Node.js backend servers.

check → Enables health check for that server.

maxconn 1024 → Max simultaneous connections for that server.

Where HAProxy
